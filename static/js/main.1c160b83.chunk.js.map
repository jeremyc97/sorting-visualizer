{"version":3,"sources":["sortingAlgorithms/MergeSort.js","sortingAlgorithms/QuickSort.js","components/Title.js","components/SortingVisualizer.jsx","sortingAlgorithms/SelectionSort.js","sortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","length","merge","getQuickSortAnimations","quickSort","low","high","piv_idx","piv","swap","partition","auxillaryArray","firstIndex","secondIndex","temp","Title","Typography","variant","this","props","title","React","Component","SortingVisualizer","state","animationSpeed","resetDisabled","selectionDisabled","insertionDisabled","mergeDisabled","quickDisabled","sortDisabled","selectedAlgo","document","resetArray","setState","enableButtons","min","max","random","arrayBars","getElementsByClassName","style","backgroundColor","val","disableButtons","selectionSort","insertionSort","endIdx","min_idx","getSelectionSortAnimations","isColorChange","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","barIndex","barStyle","newHeight","height","key","getInsertionSortAnimations","barOneIdx","barTwoIdx","className","AppBar","position","Toolbar","Box","display","m","Button","disabled","onClick","selectSortingAlgorithm","runSortingAlgorithm","map","value","idx","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c160b83.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxiliaryArray = array.slice();\n    mergeSort(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\n\n    for (let i = 0; i <= auxiliaryArray.length - 1; i++) {\n        animations.push([\"finished\", i]);\n    }\n\n    return animations;\n}\n\nfunction mergeSort(auxiliaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxiliaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxiliaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxiliaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxiliaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        // Comparing values at i-th and j-th index, so push to change their color\n        animations.push([i, j]);\n        // Push them again to revert back to original color\n        animations.push([i, j]);\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // Push the swap\n            animations.push([sortArray.length + startIndex, auxiliaryArray[i]]);\n            sortArray.push(auxiliaryArray[i++]);\n        }\n        else {\n            // Push the swap\n            animations.push([sortArray.length + startIndex, auxiliaryArray[j]]);\n            sortArray.push(auxiliaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxiliaryArray[i]]);\n        sortArray.push(auxiliaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxiliaryArray[j]]);\n        sortArray.push(auxiliaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxiliaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getQuickSortAnimations(array) {\n    let animations = [];\n    let auxiliaryArray = array.slice();\n\n    let low = 0;\n    let high = array.length - 1;\n    quickSort(auxiliaryArray, low, high, animations);\n\n    for (let i = 0; i <= array.length - 1; i++) {\n        animations.push([\"finished\", i]);\n    }\n\n    return animations;\n}\n\nfunction quickSort(auxiliaryArray, low, high, animations) {\n    let piv_idx;\n\n    if (low < high) {\n        piv_idx = partition(auxiliaryArray, low, high, animations);\n        quickSort(auxiliaryArray, low, piv_idx - 1, animations);\n        quickSort(auxiliaryArray, piv_idx + 1, high, animations);\n    }\n}\n\nfunction partition(auxiliaryArray, low, high, animations) {\n    // Pivot: element to be placed at right position\n    let piv = auxiliaryArray[high];\n    let piv_idx = low;\n\n    for (let i = low; i <= high - 1; i++) {\n        animations.push([i, high]);\n        animations.push([i, high]);\n        if (auxiliaryArray[i] <= piv) {\n            animations.push([i, auxiliaryArray[piv_idx]]);\n            animations.push([piv_idx, auxiliaryArray[i]]);\n            swap(auxiliaryArray, i, piv_idx);\n            piv_idx++;\n        } else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1])\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n\n    animations.push([piv_idx, auxiliaryArray[high]]);\n    animations.push([high, auxiliaryArray[piv_idx]]);\n    swap(auxiliaryArray, piv_idx, high);\n    return piv_idx;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\n\nexport class Title extends React.Component {\n    render() {\n        return <Typography variant='h2'>{this.props.title}</Typography>;\n    }\n}","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/MergeSort.js';\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/SelectionSort.js';\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort.js';\nimport '../styles/SortingVisualizer.css';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {Title} from './Title'\n\n// Number of bars (value) in the array\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// Main color of the array bars\nconst PRIMARY_COLOR = '#aec6cf';\n\n// Color of array bars that are being compared throughout the animations\nconst SECONDARY_COLOR = '#ff6961';\n\n// Color of array bars after sorting\nconst TERTIARY_COLOR = '#77dd77';\n\nexport default class SortingVisualizer extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      title: 'Select a sorting algorithm',\n      animationSpeed: 2,\n      resetDisabled: false,\n      selectionDisabled: false,\n      insertionDisabled: false,\n      mergeDisabled: false,\n      quickDisabled: false,\n      sortDisabled: false,\n      // Default selected sorting algorithm (0: merge)\n      selectedAlgo: -1,\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'Sorting Visualizer';\n    this.resetArray();\n  }\n\n  resetArray() {\n    this.setState({\n      title: 'Select a sorting algorithm'\n    });\n\n    this.enableButtons()\n\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(50, 650));\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n\n    this.setState({array});\n  }\n\n  disableButtons() {\n    this.setState({\n      resetDisabled: true,\n      selectionDisabled: true,\n      insertionDisabled: true,\n      mergeDisabled: true,\n      quickDisabled: true,\n      sortDisabled: true,\n    })\n  }\n\n  enableButtons(){\n    this.setState({\n      selectionDisabled: false,\n      insertionDisabled: false,\n      mergeDisabled: false,\n      quickDisabled: false,\n      sortDisabled: false,\n    })\n  }\n\n  // Select algorithm to be run when an algorithm button is clicked\n  selectSortingAlgorithm(val) {\n    if (val === 0) {\n      this.setState({\n        selectedAlgo: 0,\n        selectionDisabled: true,\n        insertionDisabled: false,\n        mergeDisabled: false,\n        quickDisabled: false,\n        title: 'Selection Sort'\n      })\n    } else if (val === 1) {\n      this.setState({\n        selectedAlgo: 1,\n        selectionDisabled: false,\n        insertionDisabled: true,\n        mergeDisabled: false,\n        quickDisabled: false,\n        title: 'Insertion Sort'\n      })\n    } else if (val === 2) {\n      this.setState({\n        selectedAlgo: 2,\n        selectionDisabled: false,\n        insertionDisabled: false,\n        mergeDisabled: true,\n        quickDisabled: false,\n        title: 'Merge Sort'\n      })\n    } else if (val === 3) {\n      this.setState({\n        selectedAlgo: 3,\n        selectionDisabled: false,\n        insertionDisabled: false,\n        mergeDisabled: false,\n        quickDisabled: true,\n        title: 'Quick Sort'\n      })\n    }\n  }\n\n  // Handler for 'Sort!' button\n  runSortingAlgorithm() {\n    if (this.state.selectedAlgo === 0) {\n      this.disableButtons()\n      this.selectionSort()\n    } else if (this.state.selectedAlgo === 1) {\n      this.disableButtons()\n      this.insertionSort()\n    } else if (this.state.selectedAlgo === 2) {\n      this.disableButtons()\n      this.mergeSort()\n    } else if (this.state.selectedAlgo === 3) {\n      this.disableButtons()\n      this.quickSort()\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = (animations[i][0] === \"comparison1\") || (animations[i][0] === \"comparison2\");\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if(isColorChange === true) {\n        const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        },i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex, temp2] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        },i * this.state.animationSpeed);  \n      }\n    }\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = (animations[i][0] === \"comparison1\") || (animations[i][0] === \"comparison2\");\n      \n      if(isColorChange === true) {\n        const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        \n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        },i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex, temp2] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        },i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange && animations[i][0] !== \"finished\") {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    \n    for (let i = 0; i <= animations.length - 1; i++) {\n      const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true && animations[i][0] !== \"finished\") {\n        const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        if(barOneIndex === -1) {\n          continue;\n        }\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        },i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        const [barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        },i * this.state.animationSpeed);  \n      }\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n    return (\n      <div className='container'>\n        <AppBar position='static'>\n            <Toolbar>\n                <Typography variant='title' color='inherit'>\n                  Sorting Algorithm Visualizer\n                </Typography>\n                <Box display='inline' m={3}><Button disabled={this.state.resetDisabled} variant='contained' color='primary' onClick={() => this.resetArray()}>Reset</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.selectionDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(0)}>Selection Sort</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.insertionDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(1)}>Insertion Sort</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.mergeDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(2)}>Merge Sort</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.quickDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(3)}>Quick Sort</Button></Box>\n                <Box display='inline' m={3}><Button disabled={this.state.sortDisabled} variant='contained' color='primary.light' onClick={() => this.runSortingAlgorithm()}>Sort!</Button></Box>\n            </Toolbar>\n        </AppBar>\n\n        <Box m={2}><Title title={this.state.title}></Title></Box>\n\n        <div className='array-container'>\n          {array.map((value, idx) => (\n            <div\n              className='array-bar'\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n      </div>\n      \n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getSelectionSortAnimations(array) {  \n    const animations = [];\n    const auxiliaryArray = array.slice();\n\n    selectionSort(auxiliaryArray, animations);\n  \n    for (let i = 0; i <= array.length - 1; i++) {\n      animations.push([\"finished\", i, i]);\n  }\n\n    return animations;\n}\n\nfunction selectionSort(auxiliaryArray, animations) {\n    let endIdx = auxiliaryArray.length - 1;\n\n    for (let i = 0; i <= endIdx; i++) {\n        // Find minimum element in unsorted array\n        let min_idx = i;\n        for (let j = i + 1; j <= endIdx; j++) {\n            animations.push([\"comparison1\", min_idx, j]);\n            animations.push([\"comparison2\", min_idx, j]);\n            if (auxiliaryArray[j] < auxiliaryArray[min_idx]){\n                min_idx = j;\n            }\n        }\n        // Swap min element with i-th element\n        animations.push([\"swap\", min_idx, auxiliaryArray[i]]);\n        animations.push([\"swap\", i, auxiliaryArray[min_idx]]);\n\n        let min = auxiliaryArray[min_idx];\n        auxiliaryArray[min_idx] = auxiliaryArray[i];\n        auxiliaryArray[i] = min;\n    }\n}","export function getInsertionSortAnimations(array) {  \n      const animations = [];\n      const auxiliaryArray = array.slice();\n      insertionSort(auxiliaryArray, animations);\n\n      for (let i = 0; i <= array.length - 1; i++) {\n        animations.push([\"finished\", i, i]);\n      }\n  \n      return animations;\n  }\n\n  function insertionSort(auxiliaryArray, animations) {\n      let endIdx = auxiliaryArray.length - 1;\n\n      for (let i = 1; i <= endIdx; ++i) {\n        // Find minimum element in unsorted array\n        let key = auxiliaryArray[i];\n        let j = i - 1;\n\n        animations.push([\"comparison1\", j, i]);\n        animations.push([\"comparison2\", j, i]);\n        \n        while (j >= 0 && auxiliaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxiliaryArray[j]]);\n\n            auxiliaryArray[j + 1] = auxiliaryArray[j];\n            j--;\n\n            if (j >= 0) {\n                animations.push([\"comparison1\", j, i]);\n                animations.push([\"comparison2\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxiliaryArray[j + 1] = key;\n      }\n  }","import React from 'react';\nimport SortingVisualizer from './components/SortingVisualizer';\nimport './styles/App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}