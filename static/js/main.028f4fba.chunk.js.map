{"version":3,"sources":["sortingAlgorithms/MergeSort.js","components/Title.js","components/SortingVisualizer.jsx","sortingAlgorithms/SelectionSort.js","sortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","length","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Title","Typography","variant","this","props","title","React","Component","SortingVisualizer","state","animationSpeed","resetDisabled","selectionDisabled","insertionDisabled","mergeDisabled","quickDisabled","sortDisabled","selectedAlgo","document","resetArray","setState","enableButtons","min","max","random","arrayBars","getElementsByClassName","style","backgroundColor","val","disableButtons","selectionSort","insertionSort","mergeSort","quickSort","min_idx","getSelectionSortAnimations","isColorChange","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","barIndex","barStyle","newHeight","height","key","getInsertionSortAnimations","barOneIdx","barTwoIdx","className","AppBar","position","Toolbar","Box","display","m","Button","disabled","onClick","selectSortingAlgorithm","runSortingAlgorithm","map","value","idx","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.028f4fba.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  if (array.length <= 1) return array;\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n\n  for (let i = 0; i <= array.length - 1; i++) {\n    animations.push([\"finished\", i]);\n  }\n\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\n\nexport class Title extends React.Component {\n    render() {\n        return <Typography variant='h2'>{this.props.title}</Typography>;\n    }\n}","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/MergeSort.js';\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/SelectionSort.js';\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort.js';\nimport '../styles/SortingVisualizer.css';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {Title} from './Title'\n\n// Number of bars (value) in the array\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// Main color of the array bars\nconst PRIMARY_COLOR = '#aec6cf';\n\n// Color of array bars that are being compared throughout the animations\nconst SECONDARY_COLOR = '#ff6961';\n\n// Color of array bars after sorting\nconst TERTIARY_COLOR = '#77dd77';\n\nexport default class SortingVisualizer extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      title: 'Select a sorting algorithm',\n      animationSpeed: 2,\n      resetDisabled: false,\n      selectionDisabled: false,\n      insertionDisabled: false,\n      mergeDisabled: false,\n      quickDisabled: false,\n      sortDisabled: false,\n      // Default selected sorting algorithm (0: merge)\n      selectedAlgo: -1,\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'Sorting Visualizer';\n    this.resetArray();\n  }\n\n  resetArray() {\n    this.setState({\n      title: 'Select a sorting algorithm'\n    });\n\n    this.enableButtons()\n\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(50, 650));\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n\n    this.setState({array});\n  }\n\n  disableButtons() {\n    this.setState({\n      resetDisabled: true,\n      selectionDisabled: true,\n      insertionDisabled: true,\n      mergeDisabled: true,\n      quickDisabled: true,\n      sortDisabled: true,\n    })\n  }\n\n  enableButtons(){\n    this.setState({\n      selectionDisabled: false,\n      insertionDisabled: false,\n      mergeDisabled: false,\n      quickDisabled: false,\n      sortDisabled: false,\n    })\n  }\n\n  // Select algorithm to be run when an algorithm button is clicked\n  selectSortingAlgorithm(val) {\n    if (val === 0) {\n      this.setState({\n        selectedAlgo: 0,\n        selectionDisabled: true,\n        insertionDisabled: false,\n        mergeDisabled: false,\n        quickDisabled: false,\n        title: 'Selection Sort'\n      })\n    } else if (val === 1) {\n      this.setState({\n        selectedAlgo: 1,\n        selectionDisabled: false,\n        insertionDisabled: true,\n        mergeDisabled: false,\n        quickDisabled: false,\n        title: 'Insertion Sort'\n      })\n    } else if (val === 2) {\n      this.setState({\n        selectedAlgo: 2,\n        selectionDisabled: false,\n        insertionDisabled: false,\n        mergeDisabled: true,\n        quickDisabled: false,\n        title: 'Merge Sort'\n      })\n    } else if (val === 3) {\n      this.setState({\n        selectedAlgo: 2,\n        selectionDisabled: false,\n        insertionDisabled: false,\n        mergeDisabled: false,\n        quickDisabled: true,\n        title: 'Quick Sort'\n      })\n    }\n  }\n\n  // Handler for 'Sort!' button\n  runSortingAlgorithm() {\n    if (this.state.selectedAlgo === 0) {\n      this.disableButtons()\n      this.selectionSort()\n    } else if (this.state.selectedAlgo === 1) {\n      this.disableButtons()\n      this.insertionSort()\n    } else if (this.state.selectedAlgo === 2) {\n      this.disableButtons()\n      this.mergeSort()\n    } else if (this.state.selectedAlgo === 3) {\n      this.disableButtons()\n      this.quickSort()\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = (animations[i][0] === \"comparison1\") || (animations[i][0] === \"comparison2\");\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if(isColorChange === true) {\n        const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        },i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex, temp2] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        },i * this.state.animationSpeed);  \n      }\n    }\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = (animations[i][0] === \"comparison1\") || (animations[i][0] === \"comparison2\");\n      \n      if(isColorChange === true) {\n        const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        \n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        },i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex, temp2] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        },i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange && animations[i][0] !== \"finished\") {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animationSpeed);\n\n      } else if (animations[i][0] === \"finished\") {\n        const [temp, barIndex] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n\n        setTimeout(() => {\n          barStyle.backgroundColor = TERTIARY_COLOR;\n          this.setState({\n            resetDisabled: false\n          })\n        },i * this.state.animationSpeed);\n\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  quickSort() {\n    \n  }\n\n  render() {\n    const {array} = this.state;\n    return (\n      <div className='container'>\n        <AppBar position='static'>\n            <Toolbar>\n                <Typography variant='title' color='inherit'>\n                  Sorting Algorithm Visualizer\n                </Typography>\n                <Box display='inline' m={3}><Button disabled={this.state.resetDisabled} variant='contained' color='primary' onClick={() => this.resetArray()}>Reset</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.selectionDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(0)}>Selection Sort</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.insertionDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(1)}>Insertion Sort</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.mergeDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(2)}>Merge Sort</Button></Box>\n                <Box display='inline' m={1}><Button disabled={this.state.quickDisabled} variant='contained' color='primary' onClick={() => this.selectSortingAlgorithm(3)}>Quick Sort</Button></Box>\n                <Box display='inline' m={3}><Button disabled={this.state.sortDisabled} variant='contained' color='primary.light' onClick={() => this.runSortingAlgorithm()}>Sort!</Button></Box>\n            </Toolbar>\n        </AppBar>\n\n        <Box m={2}><Title title={this.state.title}></Title></Box>\n\n        <div className='array-container'>\n          {array.map((value, idx) => (\n            <div\n              className='array-bar'\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n      </div>\n      \n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","export function getSelectionSortAnimations(array) {\n    if (array.length <= 1) return array;\n  \n    const animations = [];\n    let endIdx = array.length - 1;\n    const auxiliaryArray = array.slice();\n  \n    for (let i = 0; i <= endIdx; i++) {\n      // Find minimum element in unsorted array\n      let min_idx = i;\n      for (let j = i + 1; j <= endIdx; j++) {\n        animations.push([\"comparison1\", min_idx, j]);\n        animations.push([\"comparison2\", min_idx, j]);\n        if (auxiliaryArray[j] < auxiliaryArray[min_idx]){\n          min_idx = j;\n        }\n      }\n  \n      // Swap min element with i-th element\n      animations.push([\"swap\", min_idx, auxiliaryArray[i]]);\n      animations.push([\"swap\", i, auxiliaryArray[min_idx]]);\n\n      let min = auxiliaryArray[min_idx];\n      auxiliaryArray[min_idx] = auxiliaryArray[i];\n      auxiliaryArray[i] = min;\n    }\n    \n    for (let i = 0; i <= endIdx; i++) {\n        animations.push([\"finished\", i, i]);\n    }\n\n    return animations;\n  }","export function getInsertionSortAnimations(array) {\n    if (array.length <= 1) return array;\n  \n    const animations = [];\n    let endIdx = array.length - 1;\n    const auxiliaryArray = array.slice();\n  \n    for (let i = 1; i <= endIdx; ++i) {\n      // Find minimum element in unsorted array\n      let key = auxiliaryArray[i];\n      let j = i - 1;\n\n      animations.push([\"comparison1\", j, i]);\n      animations.push([\"comparison2\", j, i]);\n      \n      while (j >= 0 && auxiliaryArray[j] > key) {\n        animations.push([\"overwrite\", j + 1, auxiliaryArray[j]]);\n\n        auxiliaryArray[j + 1] = auxiliaryArray[j];\n        j--;\n\n        if (j >= 0) {\n            animations.push([\"comparison1\", j, i]);\n            animations.push([\"comparison2\", j, i]);\n        }\n      }\n      animations.push([\"overwrite\", j + 1, key]);\n      auxiliaryArray[j + 1] = key;\n    }\n\n    for (let i = 0; i <= endIdx; i++) {\n        animations.push([\"finished\", i, i]);\n    }\n\n    return animations;\n  }","import React from 'react';\nimport SortingVisualizer from './components/SortingVisualizer';\nimport './styles/App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}